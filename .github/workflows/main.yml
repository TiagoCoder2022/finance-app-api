name: Deploy

on:
  push:
    branches:
      - main

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20"

      - name: Make test envfile
        uses: SpicyPizza/create-envfile@v2.0
        with:
          envfile: .env.test
          envkey_DATABASE_URL: ${{ secrets.DATABASE_URL_TEST }}

      - name: Install dependencies
        run: npm ci --include=dev

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Start Docker service
        run: sudo service docker start

      # ðŸš€ Sobe o container PostgreSQL no CI
      - name: Start PostgreSQL container
        run: |
          docker run -d \
            --name postgres \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=password \
            -e POSTGRES_DB=finance-app \
            -p 55432:5432 \
            postgres:15

      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {1..10}; do
            docker exec postgres pg_isready -U postgres && exit 0
            sleep 2
          done
          exit 1

      - name: Generate Prisma Client
        run: npx prisma generate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL_TEST }}

      - name: Run Prisma DB Push
        run: npx prisma db push
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL_TEST }}

      - name: ESLint
        run: npm run eslint:check

      - name: Prettier
        run: npm run prettier:check

      # âœ… Roda os testes
      - name: Test
        run: npm run test
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL_TEST }}

      # âœ… Mostra logs do Postgres se falhar
      - name: Show Postgres logs on failure
        if: failure()
        run: docker logs postgres


  migrate:
    runs-on: ubuntu-latest
    needs: check
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm ci --include=dev

      - name: Make envfile
        uses: SpicyPizza/create-envfile@v2.0
        with:
          envkey_DATABASE_URL: ${{ secrets.DATABASE_URL }}
          
      - name: Run migrations
        run: npx prisma migrate deploy

  deploy:
    runs-on: ubuntu-latest
    needs: migrate
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploy to Production         
        run: |
          curl "${{ secrets.RENDER_DEPLOY_HOOK_URL }}"
